// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: DungeonSettleNotify.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Weedwacker.Shared.Network.Proto {

  /// <summary>Holder for reflection information generated from DungeonSettleNotify.proto</summary>
  public static partial class DungeonSettleNotifyReflection {

    #region Descriptor
    /// <summary>File descriptor for DungeonSettleNotify.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DungeonSettleNotifyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlEdW5nZW9uU2V0dGxlTm90aWZ5LnByb3RvGihDaGFubmVsZXJTbGFiTG9v",
            "cER1bmdlb25SZXN1bHRJbmZvLnByb3RvGhtDcnlzdGFsTGlua1NldHRsZUlu",
            "Zm8ucHJvdG8aIUR1bmdlb25TZXR0bGVFeGhpYml0aW9uSW5mby5wcm90bxom",
            "RWZmaWd5Q2hhbGxlbmdlRHVuZ2VvblJlc3VsdEluZm8ucHJvdG8aIUVmZmln",
            "eUNoYWxsZW5nZVYyU2V0dGxlSW5mby5wcm90bxodSW5zdGFibGVTcHJheVNl",
            "dHRsZUluZm8ucHJvdG8aD1BhcmFtTGlzdC5wcm90bxogUm9ndWVsaWtlRHVu",
            "Z2VvblNldHRsZUluZm8ucHJvdG8aGVN0cmVuZ3RoZW5Qb2ludERhdGEucHJv",
            "dG8aI1N1bW1lclRpbWVWMkR1bmdlb25TZXR0bGVJbmZvLnByb3RvGhlUb3dl",
            "ckxldmVsRW5kTm90aWZ5LnByb3RvGidUcmlhbEF2YXRhckZpcnN0UGFzc0R1",
            "bmdlb25Ob3RpZnkucHJvdG8aIFdpbmRGaWVsZER1bmdlb25TZXR0bGVJbmZv",
            "LnByb3RvIvIJChNEdW5nZW9uU2V0dGxlTm90aWZ5Eg4KBnJlc3VsdBgKIAEo",
            "DRISCgpkdW5nZW9uX2lkGA0gASgNElMKGXN0cmVuZ3RoZW5fcG9pbnRfZGF0",
            "YV9tYXAYDiADKAsyMC5EdW5nZW9uU2V0dGxlTm90aWZ5LlN0cmVuZ3RoZW5Q",
            "b2ludERhdGFNYXBFbnRyeRI6ChRleGhpYml0aW9uX2luZm9fbGlzdBgIIAMo",
            "CzIcLkR1bmdlb25TZXR0bGVFeGhpYml0aW9uSW5mbxIZChFjcmVhdGVfcGxh",
            "eWVyX3VpZBgMIAEoDRIWCg5mYWlsX2NvbmRfbGlzdBgLIAMoDRIQCgh1c2Vf",
            "dGltZRgBIAEoDRISCgpjbG9zZV90aW1lGAQgASgNEhIKCmlzX3N1Y2Nlc3MY",
            "ByABKAgSOQoLc2V0dGxlX3Nob3cYBSADKAsyJC5EdW5nZW9uU2V0dGxlTm90",
            "aWZ5LlNldHRsZVNob3dFbnRyeRI3ChZ0b3dlcl9sZXZlbF9lbmRfbm90aWZ5",
            "GN8CIAEoCzIULlRvd2VyTGV2ZWxFbmROb3RpZnlIABJVCiZ0cmlhbF9hdmF0",
            "YXJfZmlyc3RfcGFzc19kdW5nZW9uX25vdGlmeRj7BCABKAsyIi5UcmlhbEF2",
            "YXRhckZpcnN0UGFzc0R1bmdlb25Ob3RpZnlIABJXCidjaGFubmVsZXJfc2xh",
            "Yl9sb29wX2R1bmdlb25fcmVzdWx0X2luZm8YrgUgASgLMiMuQ2hhbm5lbGVy",
            "U2xhYkxvb3BEdW5nZW9uUmVzdWx0SW5mb0gAElIKJGVmZmlneV9jaGFsbGVu",
            "Z2VfZHVuZ2Vvbl9yZXN1bHRfaW5mbxjIAiABKAsyIS5FZmZpZ3lDaGFsbGVu",
            "Z2VEdW5nZW9uUmVzdWx0SW5mb0gAEkUKHXJvZ3VlbGlrZV9kdW5nZW9uX3Nl",
            "dHRsZV9pbmZvGMoLIAEoCzIbLlJvZ3VlbGlrZUR1bmdlb25TZXR0bGVJbmZv",
            "SAASOgoYY3J5c3RhbF9saW5rX3NldHRsZV9pbmZvGHAgASgLMhYuQ3J5c3Rh",
            "bExpbmtTZXR0bGVJbmZvSAASTQoic3VtbWVyX3RpbWVfdjJfZHVuZ2Vvbl9z",
            "ZXR0bGVfaW5mbxjaDiABKAsyHi5TdW1tZXJUaW1lVjJEdW5nZW9uU2V0dGxl",
            "SW5mb0gAEj8KGmluc3RhYmxlX3NwcmF5X3NldHRsZV9pbmZvGMEBIAEoCzIY",
            "Lkluc3RhYmxlU3ByYXlTZXR0bGVJbmZvSAASRgoed2luZF9maWVsZF9kdW5n",
            "ZW9uX3NldHRsZV9pbmZvGKEOIAEoCzIbLldpbmRGaWVsZER1bmdlb25TZXR0",
            "bGVJbmZvSAASSAofZWZmaWd5X2NoYWxsZW5nZV92Ml9zZXR0bGVfaW5mbxiK",
            "DiABKAsyHC5FZmZpZ3lDaGFsbGVuZ2VWMlNldHRsZUluZm9IABpTChtTdHJl",
            "bmd0aGVuUG9pbnREYXRhTWFwRW50cnkSCwoDa2V5GAEgASgNEiMKBXZhbHVl",
            "GAIgASgLMhQuU3RyZW5ndGhlblBvaW50RGF0YToCOAEaPQoPU2V0dGxlU2hv",
            "d0VudHJ5EgsKA2tleRgBIAEoDRIZCgV2YWx1ZRgCIAEoCzIKLlBhcmFtTGlz",
            "dDoCOAFCCAoGZGV0YWlsQiKqAh9XZWVkd2Fja2VyLlNoYXJlZC5OZXR3b3Jr",
            "LlByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.ParamListReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.StrengthenPointDataReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfoReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotifyReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotifyReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Weedwacker.Shared.Network.Proto.DungeonSettleNotify), global::Weedwacker.Shared.Network.Proto.DungeonSettleNotify.Parser, new[]{ "Result", "DungeonId", "StrengthenPointDataMap", "ExhibitionInfoList", "CreatePlayerUid", "FailCondList", "UseTime", "CloseTime", "IsSuccess", "SettleShow", "TowerLevelEndNotify", "TrialAvatarFirstPassDungeonNotify", "ChannelerSlabLoopDungeonResultInfo", "EffigyChallengeDungeonResultInfo", "RoguelikeDungeonSettleInfo", "CrystalLinkSettleInfo", "SummerTimeV2DungeonSettleInfo", "InstableSpraySettleInfo", "WindFieldDungeonSettleInfo", "EffigyChallengeV2SettleInfo" }, new[]{ "Detail" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// CmdId: 999
  /// EnetChannelId: 0
  /// EnetIsReliable: true
  /// </summary>
  public sealed partial class DungeonSettleNotify : pb::IMessage<DungeonSettleNotify>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DungeonSettleNotify> _parser = new pb::MessageParser<DungeonSettleNotify>(() => new DungeonSettleNotify());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DungeonSettleNotify> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Weedwacker.Shared.Network.Proto.DungeonSettleNotifyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DungeonSettleNotify() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DungeonSettleNotify(DungeonSettleNotify other) : this() {
      result_ = other.result_;
      dungeonId_ = other.dungeonId_;
      strengthenPointDataMap_ = other.strengthenPointDataMap_.Clone();
      exhibitionInfoList_ = other.exhibitionInfoList_.Clone();
      createPlayerUid_ = other.createPlayerUid_;
      failCondList_ = other.failCondList_.Clone();
      useTime_ = other.useTime_;
      closeTime_ = other.closeTime_;
      isSuccess_ = other.isSuccess_;
      settleShow_ = other.settleShow_.Clone();
      switch (other.DetailCase) {
        case DetailOneofCase.TowerLevelEndNotify:
          TowerLevelEndNotify = other.TowerLevelEndNotify.Clone();
          break;
        case DetailOneofCase.TrialAvatarFirstPassDungeonNotify:
          TrialAvatarFirstPassDungeonNotify = other.TrialAvatarFirstPassDungeonNotify.Clone();
          break;
        case DetailOneofCase.ChannelerSlabLoopDungeonResultInfo:
          ChannelerSlabLoopDungeonResultInfo = other.ChannelerSlabLoopDungeonResultInfo.Clone();
          break;
        case DetailOneofCase.EffigyChallengeDungeonResultInfo:
          EffigyChallengeDungeonResultInfo = other.EffigyChallengeDungeonResultInfo.Clone();
          break;
        case DetailOneofCase.RoguelikeDungeonSettleInfo:
          RoguelikeDungeonSettleInfo = other.RoguelikeDungeonSettleInfo.Clone();
          break;
        case DetailOneofCase.CrystalLinkSettleInfo:
          CrystalLinkSettleInfo = other.CrystalLinkSettleInfo.Clone();
          break;
        case DetailOneofCase.SummerTimeV2DungeonSettleInfo:
          SummerTimeV2DungeonSettleInfo = other.SummerTimeV2DungeonSettleInfo.Clone();
          break;
        case DetailOneofCase.InstableSpraySettleInfo:
          InstableSpraySettleInfo = other.InstableSpraySettleInfo.Clone();
          break;
        case DetailOneofCase.WindFieldDungeonSettleInfo:
          WindFieldDungeonSettleInfo = other.WindFieldDungeonSettleInfo.Clone();
          break;
        case DetailOneofCase.EffigyChallengeV2SettleInfo:
          EffigyChallengeV2SettleInfo = other.EffigyChallengeV2SettleInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DungeonSettleNotify Clone() {
      return new DungeonSettleNotify(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 10;
    private uint result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "dungeon_id" field.</summary>
    public const int DungeonIdFieldNumber = 13;
    private uint dungeonId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DungeonId {
      get { return dungeonId_; }
      set {
        dungeonId_ = value;
      }
    }

    /// <summary>Field number for the "strengthen_point_data_map" field.</summary>
    public const int StrengthenPointDataMapFieldNumber = 14;
    private static readonly pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.StrengthenPointData>.Codec _map_strengthenPointDataMap_codec
        = new pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.StrengthenPointData>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Weedwacker.Shared.Network.Proto.StrengthenPointData.Parser), 114);
    private readonly pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.StrengthenPointData> strengthenPointDataMap_ = new pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.StrengthenPointData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.StrengthenPointData> StrengthenPointDataMap {
      get { return strengthenPointDataMap_; }
    }

    /// <summary>Field number for the "exhibition_info_list" field.</summary>
    public const int ExhibitionInfoListFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfo> _repeated_exhibitionInfoList_codec
        = pb::FieldCodec.ForMessage(66, global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfo.Parser);
    private readonly pbc::RepeatedField<global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfo> exhibitionInfoList_ = new pbc::RepeatedField<global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Weedwacker.Shared.Network.Proto.DungeonSettleExhibitionInfo> ExhibitionInfoList {
      get { return exhibitionInfoList_; }
    }

    /// <summary>Field number for the "create_player_uid" field.</summary>
    public const int CreatePlayerUidFieldNumber = 12;
    private uint createPlayerUid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CreatePlayerUid {
      get { return createPlayerUid_; }
      set {
        createPlayerUid_ = value;
      }
    }

    /// <summary>Field number for the "fail_cond_list" field.</summary>
    public const int FailCondListFieldNumber = 11;
    private static readonly pb::FieldCodec<uint> _repeated_failCondList_codec
        = pb::FieldCodec.ForUInt32(90);
    private readonly pbc::RepeatedField<uint> failCondList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> FailCondList {
      get { return failCondList_; }
    }

    /// <summary>Field number for the "use_time" field.</summary>
    public const int UseTimeFieldNumber = 1;
    private uint useTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UseTime {
      get { return useTime_; }
      set {
        useTime_ = value;
      }
    }

    /// <summary>Field number for the "close_time" field.</summary>
    public const int CloseTimeFieldNumber = 4;
    private uint closeTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint CloseTime {
      get { return closeTime_; }
      set {
        closeTime_ = value;
      }
    }

    /// <summary>Field number for the "is_success" field.</summary>
    public const int IsSuccessFieldNumber = 7;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "settle_show" field.</summary>
    public const int SettleShowFieldNumber = 5;
    private static readonly pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.ParamList>.Codec _map_settleShow_codec
        = new pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.ParamList>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Weedwacker.Shared.Network.Proto.ParamList.Parser), 42);
    private readonly pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.ParamList> settleShow_ = new pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.ParamList>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<uint, global::Weedwacker.Shared.Network.Proto.ParamList> SettleShow {
      get { return settleShow_; }
    }

    /// <summary>Field number for the "tower_level_end_notify" field.</summary>
    public const int TowerLevelEndNotifyFieldNumber = 351;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify TowerLevelEndNotify {
      get { return detailCase_ == DetailOneofCase.TowerLevelEndNotify ? (global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.TowerLevelEndNotify;
      }
    }

    /// <summary>Field number for the "trial_avatar_first_pass_dungeon_notify" field.</summary>
    public const int TrialAvatarFirstPassDungeonNotifyFieldNumber = 635;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify TrialAvatarFirstPassDungeonNotify {
      get { return detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify ? (global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.TrialAvatarFirstPassDungeonNotify;
      }
    }

    /// <summary>Field number for the "channeler_slab_loop_dungeon_result_info" field.</summary>
    public const int ChannelerSlabLoopDungeonResultInfoFieldNumber = 686;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo ChannelerSlabLoopDungeonResultInfo {
      get { return detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo ? (global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.ChannelerSlabLoopDungeonResultInfo;
      }
    }

    /// <summary>Field number for the "effigy_challenge_dungeon_result_info" field.</summary>
    public const int EffigyChallengeDungeonResultInfoFieldNumber = 328;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo EffigyChallengeDungeonResultInfo {
      get { return detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo ? (global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.EffigyChallengeDungeonResultInfo;
      }
    }

    /// <summary>Field number for the "roguelike_dungeon_settle_info" field.</summary>
    public const int RoguelikeDungeonSettleInfoFieldNumber = 1482;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo RoguelikeDungeonSettleInfo {
      get { return detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo ? (global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.RoguelikeDungeonSettleInfo;
      }
    }

    /// <summary>Field number for the "crystal_link_settle_info" field.</summary>
    public const int CrystalLinkSettleInfoFieldNumber = 112;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo CrystalLinkSettleInfo {
      get { return detailCase_ == DetailOneofCase.CrystalLinkSettleInfo ? (global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.CrystalLinkSettleInfo;
      }
    }

    /// <summary>Field number for the "summer_time_v2_dungeon_settle_info" field.</summary>
    public const int SummerTimeV2DungeonSettleInfoFieldNumber = 1882;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo SummerTimeV2DungeonSettleInfo {
      get { return detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo ? (global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.SummerTimeV2DungeonSettleInfo;
      }
    }

    /// <summary>Field number for the "instable_spray_settle_info" field.</summary>
    public const int InstableSpraySettleInfoFieldNumber = 193;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo InstableSpraySettleInfo {
      get { return detailCase_ == DetailOneofCase.InstableSpraySettleInfo ? (global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.InstableSpraySettleInfo;
      }
    }

    /// <summary>Field number for the "wind_field_dungeon_settle_info" field.</summary>
    public const int WindFieldDungeonSettleInfoFieldNumber = 1825;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo WindFieldDungeonSettleInfo {
      get { return detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo ? (global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.WindFieldDungeonSettleInfo;
      }
    }

    /// <summary>Field number for the "effigy_challenge_v2_settle_info" field.</summary>
    public const int EffigyChallengeV2SettleInfoFieldNumber = 1802;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo EffigyChallengeV2SettleInfo {
      get { return detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo ? (global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo) detail_ : null; }
      set {
        detail_ = value;
        detailCase_ = value == null ? DetailOneofCase.None : DetailOneofCase.EffigyChallengeV2SettleInfo;
      }
    }

    private object detail_;
    /// <summary>Enum of possible cases for the "detail" oneof.</summary>
    public enum DetailOneofCase {
      None = 0,
      TowerLevelEndNotify = 351,
      TrialAvatarFirstPassDungeonNotify = 635,
      ChannelerSlabLoopDungeonResultInfo = 686,
      EffigyChallengeDungeonResultInfo = 328,
      RoguelikeDungeonSettleInfo = 1482,
      CrystalLinkSettleInfo = 112,
      SummerTimeV2DungeonSettleInfo = 1882,
      InstableSpraySettleInfo = 193,
      WindFieldDungeonSettleInfo = 1825,
      EffigyChallengeV2SettleInfo = 1802,
    }
    private DetailOneofCase detailCase_ = DetailOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DetailOneofCase DetailCase {
      get { return detailCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDetail() {
      detailCase_ = DetailOneofCase.None;
      detail_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DungeonSettleNotify);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DungeonSettleNotify other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (DungeonId != other.DungeonId) return false;
      if (!StrengthenPointDataMap.Equals(other.StrengthenPointDataMap)) return false;
      if(!exhibitionInfoList_.Equals(other.exhibitionInfoList_)) return false;
      if (CreatePlayerUid != other.CreatePlayerUid) return false;
      if(!failCondList_.Equals(other.failCondList_)) return false;
      if (UseTime != other.UseTime) return false;
      if (CloseTime != other.CloseTime) return false;
      if (IsSuccess != other.IsSuccess) return false;
      if (!SettleShow.Equals(other.SettleShow)) return false;
      if (!object.Equals(TowerLevelEndNotify, other.TowerLevelEndNotify)) return false;
      if (!object.Equals(TrialAvatarFirstPassDungeonNotify, other.TrialAvatarFirstPassDungeonNotify)) return false;
      if (!object.Equals(ChannelerSlabLoopDungeonResultInfo, other.ChannelerSlabLoopDungeonResultInfo)) return false;
      if (!object.Equals(EffigyChallengeDungeonResultInfo, other.EffigyChallengeDungeonResultInfo)) return false;
      if (!object.Equals(RoguelikeDungeonSettleInfo, other.RoguelikeDungeonSettleInfo)) return false;
      if (!object.Equals(CrystalLinkSettleInfo, other.CrystalLinkSettleInfo)) return false;
      if (!object.Equals(SummerTimeV2DungeonSettleInfo, other.SummerTimeV2DungeonSettleInfo)) return false;
      if (!object.Equals(InstableSpraySettleInfo, other.InstableSpraySettleInfo)) return false;
      if (!object.Equals(WindFieldDungeonSettleInfo, other.WindFieldDungeonSettleInfo)) return false;
      if (!object.Equals(EffigyChallengeV2SettleInfo, other.EffigyChallengeV2SettleInfo)) return false;
      if (DetailCase != other.DetailCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (DungeonId != 0) hash ^= DungeonId.GetHashCode();
      hash ^= StrengthenPointDataMap.GetHashCode();
      hash ^= exhibitionInfoList_.GetHashCode();
      if (CreatePlayerUid != 0) hash ^= CreatePlayerUid.GetHashCode();
      hash ^= failCondList_.GetHashCode();
      if (UseTime != 0) hash ^= UseTime.GetHashCode();
      if (CloseTime != 0) hash ^= CloseTime.GetHashCode();
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      hash ^= SettleShow.GetHashCode();
      if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) hash ^= TowerLevelEndNotify.GetHashCode();
      if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) hash ^= TrialAvatarFirstPassDungeonNotify.GetHashCode();
      if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) hash ^= ChannelerSlabLoopDungeonResultInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) hash ^= EffigyChallengeDungeonResultInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) hash ^= RoguelikeDungeonSettleInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) hash ^= CrystalLinkSettleInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) hash ^= SummerTimeV2DungeonSettleInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) hash ^= InstableSpraySettleInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) hash ^= WindFieldDungeonSettleInfo.GetHashCode();
      if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) hash ^= EffigyChallengeV2SettleInfo.GetHashCode();
      hash ^= (int) detailCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UseTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseTime);
      }
      if (CloseTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CloseTime);
      }
      settleShow_.WriteTo(output, _map_settleShow_codec);
      if (IsSuccess != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSuccess);
      }
      exhibitionInfoList_.WriteTo(output, _repeated_exhibitionInfoList_codec);
      if (Result != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Result);
      }
      failCondList_.WriteTo(output, _repeated_failCondList_codec);
      if (CreatePlayerUid != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CreatePlayerUid);
      }
      if (DungeonId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(DungeonId);
      }
      strengthenPointDataMap_.WriteTo(output, _map_strengthenPointDataMap_codec);
      if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(CrystalLinkSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(InstableSpraySettleInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) {
        output.WriteRawTag(194, 20);
        output.WriteMessage(EffigyChallengeDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) {
        output.WriteRawTag(250, 21);
        output.WriteMessage(TowerLevelEndNotify);
      }
      if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) {
        output.WriteRawTag(218, 39);
        output.WriteMessage(TrialAvatarFirstPassDungeonNotify);
      }
      if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) {
        output.WriteRawTag(242, 42);
        output.WriteMessage(ChannelerSlabLoopDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) {
        output.WriteRawTag(210, 92);
        output.WriteMessage(RoguelikeDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) {
        output.WriteRawTag(210, 112);
        output.WriteMessage(EffigyChallengeV2SettleInfo);
      }
      if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) {
        output.WriteRawTag(138, 114);
        output.WriteMessage(WindFieldDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) {
        output.WriteRawTag(210, 117);
        output.WriteMessage(SummerTimeV2DungeonSettleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UseTime != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(UseTime);
      }
      if (CloseTime != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CloseTime);
      }
      settleShow_.WriteTo(ref output, _map_settleShow_codec);
      if (IsSuccess != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsSuccess);
      }
      exhibitionInfoList_.WriteTo(ref output, _repeated_exhibitionInfoList_codec);
      if (Result != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Result);
      }
      failCondList_.WriteTo(ref output, _repeated_failCondList_codec);
      if (CreatePlayerUid != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(CreatePlayerUid);
      }
      if (DungeonId != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(DungeonId);
      }
      strengthenPointDataMap_.WriteTo(ref output, _map_strengthenPointDataMap_codec);
      if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(CrystalLinkSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) {
        output.WriteRawTag(138, 12);
        output.WriteMessage(InstableSpraySettleInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) {
        output.WriteRawTag(194, 20);
        output.WriteMessage(EffigyChallengeDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) {
        output.WriteRawTag(250, 21);
        output.WriteMessage(TowerLevelEndNotify);
      }
      if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) {
        output.WriteRawTag(218, 39);
        output.WriteMessage(TrialAvatarFirstPassDungeonNotify);
      }
      if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) {
        output.WriteRawTag(242, 42);
        output.WriteMessage(ChannelerSlabLoopDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) {
        output.WriteRawTag(210, 92);
        output.WriteMessage(RoguelikeDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) {
        output.WriteRawTag(210, 112);
        output.WriteMessage(EffigyChallengeV2SettleInfo);
      }
      if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) {
        output.WriteRawTag(138, 114);
        output.WriteMessage(WindFieldDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) {
        output.WriteRawTag(210, 117);
        output.WriteMessage(SummerTimeV2DungeonSettleInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Result);
      }
      if (DungeonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DungeonId);
      }
      size += strengthenPointDataMap_.CalculateSize(_map_strengthenPointDataMap_codec);
      size += exhibitionInfoList_.CalculateSize(_repeated_exhibitionInfoList_codec);
      if (CreatePlayerUid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CreatePlayerUid);
      }
      size += failCondList_.CalculateSize(_repeated_failCondList_codec);
      if (UseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UseTime);
      }
      if (CloseTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CloseTime);
      }
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      size += settleShow_.CalculateSize(_map_settleShow_codec);
      if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TowerLevelEndNotify);
      }
      if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrialAvatarFirstPassDungeonNotify);
      }
      if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ChannelerSlabLoopDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EffigyChallengeDungeonResultInfo);
      }
      if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoguelikeDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CrystalLinkSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SummerTimeV2DungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InstableSpraySettleInfo);
      }
      if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WindFieldDungeonSettleInfo);
      }
      if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EffigyChallengeV2SettleInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DungeonSettleNotify other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.DungeonId != 0) {
        DungeonId = other.DungeonId;
      }
      strengthenPointDataMap_.Add(other.strengthenPointDataMap_);
      exhibitionInfoList_.Add(other.exhibitionInfoList_);
      if (other.CreatePlayerUid != 0) {
        CreatePlayerUid = other.CreatePlayerUid;
      }
      failCondList_.Add(other.failCondList_);
      if (other.UseTime != 0) {
        UseTime = other.UseTime;
      }
      if (other.CloseTime != 0) {
        CloseTime = other.CloseTime;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      settleShow_.Add(other.settleShow_);
      switch (other.DetailCase) {
        case DetailOneofCase.TowerLevelEndNotify:
          if (TowerLevelEndNotify == null) {
            TowerLevelEndNotify = new global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify();
          }
          TowerLevelEndNotify.MergeFrom(other.TowerLevelEndNotify);
          break;
        case DetailOneofCase.TrialAvatarFirstPassDungeonNotify:
          if (TrialAvatarFirstPassDungeonNotify == null) {
            TrialAvatarFirstPassDungeonNotify = new global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify();
          }
          TrialAvatarFirstPassDungeonNotify.MergeFrom(other.TrialAvatarFirstPassDungeonNotify);
          break;
        case DetailOneofCase.ChannelerSlabLoopDungeonResultInfo:
          if (ChannelerSlabLoopDungeonResultInfo == null) {
            ChannelerSlabLoopDungeonResultInfo = new global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo();
          }
          ChannelerSlabLoopDungeonResultInfo.MergeFrom(other.ChannelerSlabLoopDungeonResultInfo);
          break;
        case DetailOneofCase.EffigyChallengeDungeonResultInfo:
          if (EffigyChallengeDungeonResultInfo == null) {
            EffigyChallengeDungeonResultInfo = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo();
          }
          EffigyChallengeDungeonResultInfo.MergeFrom(other.EffigyChallengeDungeonResultInfo);
          break;
        case DetailOneofCase.RoguelikeDungeonSettleInfo:
          if (RoguelikeDungeonSettleInfo == null) {
            RoguelikeDungeonSettleInfo = new global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo();
          }
          RoguelikeDungeonSettleInfo.MergeFrom(other.RoguelikeDungeonSettleInfo);
          break;
        case DetailOneofCase.CrystalLinkSettleInfo:
          if (CrystalLinkSettleInfo == null) {
            CrystalLinkSettleInfo = new global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo();
          }
          CrystalLinkSettleInfo.MergeFrom(other.CrystalLinkSettleInfo);
          break;
        case DetailOneofCase.SummerTimeV2DungeonSettleInfo:
          if (SummerTimeV2DungeonSettleInfo == null) {
            SummerTimeV2DungeonSettleInfo = new global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo();
          }
          SummerTimeV2DungeonSettleInfo.MergeFrom(other.SummerTimeV2DungeonSettleInfo);
          break;
        case DetailOneofCase.InstableSpraySettleInfo:
          if (InstableSpraySettleInfo == null) {
            InstableSpraySettleInfo = new global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo();
          }
          InstableSpraySettleInfo.MergeFrom(other.InstableSpraySettleInfo);
          break;
        case DetailOneofCase.WindFieldDungeonSettleInfo:
          if (WindFieldDungeonSettleInfo == null) {
            WindFieldDungeonSettleInfo = new global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo();
          }
          WindFieldDungeonSettleInfo.MergeFrom(other.WindFieldDungeonSettleInfo);
          break;
        case DetailOneofCase.EffigyChallengeV2SettleInfo:
          if (EffigyChallengeV2SettleInfo == null) {
            EffigyChallengeV2SettleInfo = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo();
          }
          EffigyChallengeV2SettleInfo.MergeFrom(other.EffigyChallengeV2SettleInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseTime = input.ReadUInt32();
            break;
          }
          case 32: {
            CloseTime = input.ReadUInt32();
            break;
          }
          case 42: {
            settleShow_.AddEntriesFrom(input, _map_settleShow_codec);
            break;
          }
          case 56: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 66: {
            exhibitionInfoList_.AddEntriesFrom(input, _repeated_exhibitionInfoList_codec);
            break;
          }
          case 80: {
            Result = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            failCondList_.AddEntriesFrom(input, _repeated_failCondList_codec);
            break;
          }
          case 96: {
            CreatePlayerUid = input.ReadUInt32();
            break;
          }
          case 104: {
            DungeonId = input.ReadUInt32();
            break;
          }
          case 114: {
            strengthenPointDataMap_.AddEntriesFrom(input, _map_strengthenPointDataMap_codec);
            break;
          }
          case 898: {
            global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo();
            if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) {
              subBuilder.MergeFrom(CrystalLinkSettleInfo);
            }
            input.ReadMessage(subBuilder);
            CrystalLinkSettleInfo = subBuilder;
            break;
          }
          case 1546: {
            global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo();
            if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) {
              subBuilder.MergeFrom(InstableSpraySettleInfo);
            }
            input.ReadMessage(subBuilder);
            InstableSpraySettleInfo = subBuilder;
            break;
          }
          case 2626: {
            global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo();
            if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) {
              subBuilder.MergeFrom(EffigyChallengeDungeonResultInfo);
            }
            input.ReadMessage(subBuilder);
            EffigyChallengeDungeonResultInfo = subBuilder;
            break;
          }
          case 2810: {
            global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify subBuilder = new global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify();
            if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) {
              subBuilder.MergeFrom(TowerLevelEndNotify);
            }
            input.ReadMessage(subBuilder);
            TowerLevelEndNotify = subBuilder;
            break;
          }
          case 5082: {
            global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify subBuilder = new global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify();
            if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) {
              subBuilder.MergeFrom(TrialAvatarFirstPassDungeonNotify);
            }
            input.ReadMessage(subBuilder);
            TrialAvatarFirstPassDungeonNotify = subBuilder;
            break;
          }
          case 5490: {
            global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo();
            if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) {
              subBuilder.MergeFrom(ChannelerSlabLoopDungeonResultInfo);
            }
            input.ReadMessage(subBuilder);
            ChannelerSlabLoopDungeonResultInfo = subBuilder;
            break;
          }
          case 11858: {
            global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) {
              subBuilder.MergeFrom(RoguelikeDungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            RoguelikeDungeonSettleInfo = subBuilder;
            break;
          }
          case 14418: {
            global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo();
            if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) {
              subBuilder.MergeFrom(EffigyChallengeV2SettleInfo);
            }
            input.ReadMessage(subBuilder);
            EffigyChallengeV2SettleInfo = subBuilder;
            break;
          }
          case 14602: {
            global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) {
              subBuilder.MergeFrom(WindFieldDungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            WindFieldDungeonSettleInfo = subBuilder;
            break;
          }
          case 15058: {
            global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) {
              subBuilder.MergeFrom(SummerTimeV2DungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            SummerTimeV2DungeonSettleInfo = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UseTime = input.ReadUInt32();
            break;
          }
          case 32: {
            CloseTime = input.ReadUInt32();
            break;
          }
          case 42: {
            settleShow_.AddEntriesFrom(ref input, _map_settleShow_codec);
            break;
          }
          case 56: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 66: {
            exhibitionInfoList_.AddEntriesFrom(ref input, _repeated_exhibitionInfoList_codec);
            break;
          }
          case 80: {
            Result = input.ReadUInt32();
            break;
          }
          case 90:
          case 88: {
            failCondList_.AddEntriesFrom(ref input, _repeated_failCondList_codec);
            break;
          }
          case 96: {
            CreatePlayerUid = input.ReadUInt32();
            break;
          }
          case 104: {
            DungeonId = input.ReadUInt32();
            break;
          }
          case 114: {
            strengthenPointDataMap_.AddEntriesFrom(ref input, _map_strengthenPointDataMap_codec);
            break;
          }
          case 898: {
            global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.CrystalLinkSettleInfo();
            if (detailCase_ == DetailOneofCase.CrystalLinkSettleInfo) {
              subBuilder.MergeFrom(CrystalLinkSettleInfo);
            }
            input.ReadMessage(subBuilder);
            CrystalLinkSettleInfo = subBuilder;
            break;
          }
          case 1546: {
            global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.InstableSpraySettleInfo();
            if (detailCase_ == DetailOneofCase.InstableSpraySettleInfo) {
              subBuilder.MergeFrom(InstableSpraySettleInfo);
            }
            input.ReadMessage(subBuilder);
            InstableSpraySettleInfo = subBuilder;
            break;
          }
          case 2626: {
            global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeDungeonResultInfo();
            if (detailCase_ == DetailOneofCase.EffigyChallengeDungeonResultInfo) {
              subBuilder.MergeFrom(EffigyChallengeDungeonResultInfo);
            }
            input.ReadMessage(subBuilder);
            EffigyChallengeDungeonResultInfo = subBuilder;
            break;
          }
          case 2810: {
            global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify subBuilder = new global::Weedwacker.Shared.Network.Proto.TowerLevelEndNotify();
            if (detailCase_ == DetailOneofCase.TowerLevelEndNotify) {
              subBuilder.MergeFrom(TowerLevelEndNotify);
            }
            input.ReadMessage(subBuilder);
            TowerLevelEndNotify = subBuilder;
            break;
          }
          case 5082: {
            global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify subBuilder = new global::Weedwacker.Shared.Network.Proto.TrialAvatarFirstPassDungeonNotify();
            if (detailCase_ == DetailOneofCase.TrialAvatarFirstPassDungeonNotify) {
              subBuilder.MergeFrom(TrialAvatarFirstPassDungeonNotify);
            }
            input.ReadMessage(subBuilder);
            TrialAvatarFirstPassDungeonNotify = subBuilder;
            break;
          }
          case 5490: {
            global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.ChannelerSlabLoopDungeonResultInfo();
            if (detailCase_ == DetailOneofCase.ChannelerSlabLoopDungeonResultInfo) {
              subBuilder.MergeFrom(ChannelerSlabLoopDungeonResultInfo);
            }
            input.ReadMessage(subBuilder);
            ChannelerSlabLoopDungeonResultInfo = subBuilder;
            break;
          }
          case 11858: {
            global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.RoguelikeDungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.RoguelikeDungeonSettleInfo) {
              subBuilder.MergeFrom(RoguelikeDungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            RoguelikeDungeonSettleInfo = subBuilder;
            break;
          }
          case 14418: {
            global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.EffigyChallengeV2SettleInfo();
            if (detailCase_ == DetailOneofCase.EffigyChallengeV2SettleInfo) {
              subBuilder.MergeFrom(EffigyChallengeV2SettleInfo);
            }
            input.ReadMessage(subBuilder);
            EffigyChallengeV2SettleInfo = subBuilder;
            break;
          }
          case 14602: {
            global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.WindFieldDungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.WindFieldDungeonSettleInfo) {
              subBuilder.MergeFrom(WindFieldDungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            WindFieldDungeonSettleInfo = subBuilder;
            break;
          }
          case 15058: {
            global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo subBuilder = new global::Weedwacker.Shared.Network.Proto.SummerTimeV2DungeonSettleInfo();
            if (detailCase_ == DetailOneofCase.SummerTimeV2DungeonSettleInfo) {
              subBuilder.MergeFrom(SummerTimeV2DungeonSettleInfo);
            }
            input.ReadMessage(subBuilder);
            SummerTimeV2DungeonSettleInfo = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
