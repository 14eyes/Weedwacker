// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GCGMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Weedwacker.Shared.Network.Proto {

  /// <summary>Holder for reflection information generated from GCGMessage.proto</summary>
  public static partial class GCGMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for GCGMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GCGMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBHQ0dNZXNzYWdlLnByb3RvGhRHQ0dNc2dBZGRDYXJkcy5wcm90bxoTR0NH",
            "TXNnQWRkRGljZS5wcm90bxoWR0NHTXNnQ2FyZFVwZGF0ZS5wcm90bxoTR0NH",
            "TXNnQ2hhckRpZS5wcm90bxoZR0NHTXNnQ2xpZW50UGVyZm9ybS5wcm90bxoU",
            "R0NHTXNnQ29zdERpY2UucHJvdG8aFkdDR01zZ0Nvc3RSZXZpc2UucHJvdG8a",
            "FkdDR01zZ0RpY2VSZXJvbGwucHJvdG8aFEdDR01zZ0RpY2VSb2xsLnByb3Rv",
            "GhpHQ0dNc2dEdWVsRGF0YUNoYW5nZS5wcm90bxoUR0NHTXNnR2FtZU92ZXIu",
            "cHJvdG8aFUdDR01zZ01vZGlmeUFkZC5wcm90bxoYR0NHTXNnTW9kaWZ5UmVt",
            "b3ZlLnByb3RvGhRHQ0dNc2dNb3ZlQ2FyZC5wcm90bxoTR0NHTXNnTmV3Q2Fy",
            "ZC5wcm90bxoTR0NHTXNnT3BUaW1lci5wcm90bxoTR0NHTXNnUFZFRG9PcC5w",
            "cm90bxoYR0NHTXNnUFZFR2VuQ2FyZE9wLnByb3RvGhBHQ0dNc2dQYXNzLnBy",
            "b3RvGhdHQ0dNc2dQaGFzZUNoYW5nZS5wcm90bxoXR0NHTXNnUmVtb3ZlQ2Fy",
            "ZHMucHJvdG8aGUdDR01zZ1NlbGVjdE9uU3RhZ2UucHJvdG8aIUdDR01zZ1Nl",
            "bGVjdE9uU3RhZ2VCeUVmZmVjdC5wcm90bxoXR0NHTXNnU2tpbGxSZXN1bHQu",
            "cHJvdG8aF0dDR01zZ1Rva2VuQ2hhbmdlLnByb3RvGhxHQ0dNc2dVcGRhdGVD",
            "b250cm9sbGVyLnByb3RvGhRHQ0dNc2dVc2VTa2lsbC5wcm90bxoXR0NHTXNn",
            "VXNlU2tpbGxFbmQucHJvdG8aHUdDR01zZ1dhaXRpbmdMaXN0Q2hhbmdlLnBy",
            "b3RvIoMKCgpHQ0dNZXNzYWdlEioKDHRva2VuX2NoYW5nZRgMIAEoCzISLkdD",
            "R01zZ1Rva2VuQ2hhbmdlSAASKgoMcGhhc2VfY2hhbmdlGA0gASgLMhIuR0NH",
            "TXNnUGhhc2VDaGFuZ2VIABIkCglhZGRfY2FyZHMYCiABKAsyDy5HQ0dNc2dB",
            "ZGRDYXJkc0gAEioKDHJlbW92ZV9jYXJkcxgOIAEoCzISLkdDR01zZ1JlbW92",
            "ZUNhcmRzSAASLwoPc2VsZWN0X29uX3N0YWdlGAYgASgLMhQuR0NHTXNnU2Vs",
            "ZWN0T25TdGFnZUgAEiQKCWRpY2Vfcm9sbBgJIAEoCzIPLkdDR01zZ0RpY2VS",
            "b2xsSAASKAoLZGljZV9yZXJvbGwYCyABKAsyES5HQ0dNc2dEaWNlUmVyb2xs",
            "SAASGwoEcGFzcxgFIAEoCzILLkdDR01zZ1Bhc3NIABIiCghjaGFyX2RpZRgC",
            "IAEoCzIOLkdDR01zZ0NoYXJEaWVIABIqCgxza2lsbF9yZXN1bHQYASABKAsy",
            "Ei5HQ0dNc2dTa2lsbFJlc3VsdEgAEiQKCWNvc3RfZGljZRgHIAEoCzIPLkdD",
            "R01zZ0Nvc3REaWNlSAASIgoIYWRkX2RpY2UYAyABKAsyDi5HQ0dNc2dBZGRE",
            "aWNlSAASJAoJbW92ZV9jYXJkGA8gASgLMg8uR0NHTXNnTW92ZUNhcmRIABIk",
            "Cgl1c2Vfc2tpbGwYBCABKAsyDy5HQ0dNc2dVc2VTa2lsbEgAEiMKCG5ld19j",
            "YXJkGLgOIAEoCzIOLkdDR01zZ05ld0NhcmRIABI1ChF1cGRhdGVfY29udHJv",
            "bGxlchitAyABKAsyFy5HQ0dNc2dVcGRhdGVDb250cm9sbGVySAASJwoKbW9k",
            "aWZ5X2FkZBi7DiABKAsyEC5HQ0dNc2dNb2RpZnlBZGRIABItCg1tb2RpZnlf",
            "cmVtb3ZlGNcDIAEoCzITLkdDR01zZ01vZGlmeVJlbW92ZUgAEiwKDXVzZV9z",
            "a2lsbF9lbmQYgwsgASgLMhIuR0NHTXNnVXNlU2tpbGxFbmRIABIvCg9wdmVf",
            "Z2VuX2NhcmRfb3AYzQ0gASgLMhMuR0NHTXNnUFZFR2VuQ2FyZE9wSAASJAoJ",
            "cHZlX2RvX29wGOYEIAEoCzIOLkdDR01zZ1BWRURvT3BIABIyChBkdWVsX2Rh",
            "dGFfY2hhbmdlGPAHIAEoCzIVLkdDR01zZ0R1ZWxEYXRhQ2hhbmdlSAASLwoO",
            "Y2xpZW50X3BlcmZvcm0YiwggASgLMhQuR0NHTXNnQ2xpZW50UGVyZm9ybUgA",
            "EiUKCWdhbWVfb3ZlchjKBSABKAsyDy5HQ0dNc2dHYW1lT3ZlckgAEiMKCG9w",
            "X3RpbWVyGMYOIAEoCzIOLkdDR01zZ09wVGltZXJIABI4ChN3YWl0aW5nX2xp",
            "c3RfY2hhbmdlGI4NIAEoCzIYLkdDR01zZ1dhaXRpbmdMaXN0Q2hhbmdlSAAS",
            "KQoLY2FyZF91cGRhdGUY1w4gASgLMhEuR0NHTXNnQ2FyZFVwZGF0ZUgAEkIK",
            "GXNlbGVjdF9vbl9zdGFnZV9ieV9lZmZlY3QY+g8gASgLMhwuR0NHTXNnU2Vs",
            "ZWN0T25TdGFnZUJ5RWZmZWN0SAASKQoLY29zdF9yZXZpc2UYxgogASgLMhEu",
            "R0NHTXNnQ29zdFJldmlzZUgAQgkKB21lc3NhZ2VCIqoCH1dlZWR3YWNrZXIu",
            "U2hhcmVkLk5ldHdvcmsuUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Weedwacker.Shared.Network.Proto.GCGMsgAddCardsReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgAddDiceReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdateReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgCharDieReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerformReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgCostDiceReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgCostReviseReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRerollReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRollReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChangeReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgGameOverReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAddReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemoveReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCardReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgNewCardReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimerReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOpReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOpReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgPassReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChangeReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCardsReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffectReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResultReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChangeReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateControllerReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEndReflection.Descriptor, global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChangeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Weedwacker.Shared.Network.Proto.GCGMessage), global::Weedwacker.Shared.Network.Proto.GCGMessage.Parser, new[]{ "TokenChange", "PhaseChange", "AddCards", "RemoveCards", "SelectOnStage", "DiceRoll", "DiceReroll", "Pass", "CharDie", "SkillResult", "CostDice", "AddDice", "MoveCard", "UseSkill", "NewCard", "UpdateController", "ModifyAdd", "ModifyRemove", "UseSkillEnd", "PveGenCardOp", "PveDoOp", "DuelDataChange", "ClientPerform", "GameOver", "OpTimer", "WaitingListChange", "CardUpdate", "SelectOnStageByEffect", "CostRevise" }, new[]{ "Message" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GCGMessage : pb::IMessage<GCGMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GCGMessage> _parser = new pb::MessageParser<GCGMessage>(() => new GCGMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GCGMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Weedwacker.Shared.Network.Proto.GCGMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GCGMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GCGMessage(GCGMessage other) : this() {
      switch (other.MessageCase) {
        case MessageOneofCase.TokenChange:
          TokenChange = other.TokenChange.Clone();
          break;
        case MessageOneofCase.PhaseChange:
          PhaseChange = other.PhaseChange.Clone();
          break;
        case MessageOneofCase.AddCards:
          AddCards = other.AddCards.Clone();
          break;
        case MessageOneofCase.RemoveCards:
          RemoveCards = other.RemoveCards.Clone();
          break;
        case MessageOneofCase.SelectOnStage:
          SelectOnStage = other.SelectOnStage.Clone();
          break;
        case MessageOneofCase.DiceRoll:
          DiceRoll = other.DiceRoll.Clone();
          break;
        case MessageOneofCase.DiceReroll:
          DiceReroll = other.DiceReroll.Clone();
          break;
        case MessageOneofCase.Pass:
          Pass = other.Pass.Clone();
          break;
        case MessageOneofCase.CharDie:
          CharDie = other.CharDie.Clone();
          break;
        case MessageOneofCase.SkillResult:
          SkillResult = other.SkillResult.Clone();
          break;
        case MessageOneofCase.CostDice:
          CostDice = other.CostDice.Clone();
          break;
        case MessageOneofCase.AddDice:
          AddDice = other.AddDice.Clone();
          break;
        case MessageOneofCase.MoveCard:
          MoveCard = other.MoveCard.Clone();
          break;
        case MessageOneofCase.UseSkill:
          UseSkill = other.UseSkill.Clone();
          break;
        case MessageOneofCase.NewCard:
          NewCard = other.NewCard.Clone();
          break;
        case MessageOneofCase.UpdateController:
          UpdateController = other.UpdateController.Clone();
          break;
        case MessageOneofCase.ModifyAdd:
          ModifyAdd = other.ModifyAdd.Clone();
          break;
        case MessageOneofCase.ModifyRemove:
          ModifyRemove = other.ModifyRemove.Clone();
          break;
        case MessageOneofCase.UseSkillEnd:
          UseSkillEnd = other.UseSkillEnd.Clone();
          break;
        case MessageOneofCase.PveGenCardOp:
          PveGenCardOp = other.PveGenCardOp.Clone();
          break;
        case MessageOneofCase.PveDoOp:
          PveDoOp = other.PveDoOp.Clone();
          break;
        case MessageOneofCase.DuelDataChange:
          DuelDataChange = other.DuelDataChange.Clone();
          break;
        case MessageOneofCase.ClientPerform:
          ClientPerform = other.ClientPerform.Clone();
          break;
        case MessageOneofCase.GameOver:
          GameOver = other.GameOver.Clone();
          break;
        case MessageOneofCase.OpTimer:
          OpTimer = other.OpTimer.Clone();
          break;
        case MessageOneofCase.WaitingListChange:
          WaitingListChange = other.WaitingListChange.Clone();
          break;
        case MessageOneofCase.CardUpdate:
          CardUpdate = other.CardUpdate.Clone();
          break;
        case MessageOneofCase.SelectOnStageByEffect:
          SelectOnStageByEffect = other.SelectOnStageByEffect.Clone();
          break;
        case MessageOneofCase.CostRevise:
          CostRevise = other.CostRevise.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GCGMessage Clone() {
      return new GCGMessage(this);
    }

    /// <summary>Field number for the "token_change" field.</summary>
    public const int TokenChangeFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange TokenChange {
      get { return messageCase_ == MessageOneofCase.TokenChange ? (global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.TokenChange;
      }
    }

    /// <summary>Field number for the "phase_change" field.</summary>
    public const int PhaseChangeFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange PhaseChange {
      get { return messageCase_ == MessageOneofCase.PhaseChange ? (global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PhaseChange;
      }
    }

    /// <summary>Field number for the "add_cards" field.</summary>
    public const int AddCardsFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards AddCards {
      get { return messageCase_ == MessageOneofCase.AddCards ? (global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.AddCards;
      }
    }

    /// <summary>Field number for the "remove_cards" field.</summary>
    public const int RemoveCardsFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards RemoveCards {
      get { return messageCase_ == MessageOneofCase.RemoveCards ? (global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.RemoveCards;
      }
    }

    /// <summary>Field number for the "select_on_stage" field.</summary>
    public const int SelectOnStageFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage SelectOnStage {
      get { return messageCase_ == MessageOneofCase.SelectOnStage ? (global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SelectOnStage;
      }
    }

    /// <summary>Field number for the "dice_roll" field.</summary>
    public const int DiceRollFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll DiceRoll {
      get { return messageCase_ == MessageOneofCase.DiceRoll ? (global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DiceRoll;
      }
    }

    /// <summary>Field number for the "dice_reroll" field.</summary>
    public const int DiceRerollFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll DiceReroll {
      get { return messageCase_ == MessageOneofCase.DiceReroll ? (global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DiceReroll;
      }
    }

    /// <summary>Field number for the "pass" field.</summary>
    public const int PassFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgPass Pass {
      get { return messageCase_ == MessageOneofCase.Pass ? (global::Weedwacker.Shared.Network.Proto.GCGMsgPass) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.Pass;
      }
    }

    /// <summary>Field number for the "char_die" field.</summary>
    public const int CharDieFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie CharDie {
      get { return messageCase_ == MessageOneofCase.CharDie ? (global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CharDie;
      }
    }

    /// <summary>Field number for the "skill_result" field.</summary>
    public const int SkillResultFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult SkillResult {
      get { return messageCase_ == MessageOneofCase.SkillResult ? (global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SkillResult;
      }
    }

    /// <summary>Field number for the "cost_dice" field.</summary>
    public const int CostDiceFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice CostDice {
      get { return messageCase_ == MessageOneofCase.CostDice ? (global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CostDice;
      }
    }

    /// <summary>Field number for the "add_dice" field.</summary>
    public const int AddDiceFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice AddDice {
      get { return messageCase_ == MessageOneofCase.AddDice ? (global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.AddDice;
      }
    }

    /// <summary>Field number for the "move_card" field.</summary>
    public const int MoveCardFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard MoveCard {
      get { return messageCase_ == MessageOneofCase.MoveCard ? (global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.MoveCard;
      }
    }

    /// <summary>Field number for the "use_skill" field.</summary>
    public const int UseSkillFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill UseSkill {
      get { return messageCase_ == MessageOneofCase.UseSkill ? (global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UseSkill;
      }
    }

    /// <summary>Field number for the "new_card" field.</summary>
    public const int NewCardFieldNumber = 1848;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard NewCard {
      get { return messageCase_ == MessageOneofCase.NewCard ? (global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.NewCard;
      }
    }

    /// <summary>Field number for the "update_controller" field.</summary>
    public const int UpdateControllerFieldNumber = 429;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController UpdateController {
      get { return messageCase_ == MessageOneofCase.UpdateController ? (global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UpdateController;
      }
    }

    /// <summary>Field number for the "modify_add" field.</summary>
    public const int ModifyAddFieldNumber = 1851;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd ModifyAdd {
      get { return messageCase_ == MessageOneofCase.ModifyAdd ? (global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ModifyAdd;
      }
    }

    /// <summary>Field number for the "modify_remove" field.</summary>
    public const int ModifyRemoveFieldNumber = 471;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove ModifyRemove {
      get { return messageCase_ == MessageOneofCase.ModifyRemove ? (global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ModifyRemove;
      }
    }

    /// <summary>Field number for the "use_skill_end" field.</summary>
    public const int UseSkillEndFieldNumber = 1411;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd UseSkillEnd {
      get { return messageCase_ == MessageOneofCase.UseSkillEnd ? (global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.UseSkillEnd;
      }
    }

    /// <summary>Field number for the "pve_gen_card_op" field.</summary>
    public const int PveGenCardOpFieldNumber = 1741;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp PveGenCardOp {
      get { return messageCase_ == MessageOneofCase.PveGenCardOp ? (global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PveGenCardOp;
      }
    }

    /// <summary>Field number for the "pve_do_op" field.</summary>
    public const int PveDoOpFieldNumber = 614;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp PveDoOp {
      get { return messageCase_ == MessageOneofCase.PveDoOp ? (global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.PveDoOp;
      }
    }

    /// <summary>Field number for the "duel_data_change" field.</summary>
    public const int DuelDataChangeFieldNumber = 1008;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange DuelDataChange {
      get { return messageCase_ == MessageOneofCase.DuelDataChange ? (global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.DuelDataChange;
      }
    }

    /// <summary>Field number for the "client_perform" field.</summary>
    public const int ClientPerformFieldNumber = 1035;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform ClientPerform {
      get { return messageCase_ == MessageOneofCase.ClientPerform ? (global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.ClientPerform;
      }
    }

    /// <summary>Field number for the "game_over" field.</summary>
    public const int GameOverFieldNumber = 714;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver GameOver {
      get { return messageCase_ == MessageOneofCase.GameOver ? (global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.GameOver;
      }
    }

    /// <summary>Field number for the "op_timer" field.</summary>
    public const int OpTimerFieldNumber = 1862;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer OpTimer {
      get { return messageCase_ == MessageOneofCase.OpTimer ? (global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.OpTimer;
      }
    }

    /// <summary>Field number for the "waiting_list_change" field.</summary>
    public const int WaitingListChangeFieldNumber = 1678;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange WaitingListChange {
      get { return messageCase_ == MessageOneofCase.WaitingListChange ? (global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.WaitingListChange;
      }
    }

    /// <summary>Field number for the "card_update" field.</summary>
    public const int CardUpdateFieldNumber = 1879;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate CardUpdate {
      get { return messageCase_ == MessageOneofCase.CardUpdate ? (global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CardUpdate;
      }
    }

    /// <summary>Field number for the "select_on_stage_by_effect" field.</summary>
    public const int SelectOnStageByEffectFieldNumber = 2042;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect SelectOnStageByEffect {
      get { return messageCase_ == MessageOneofCase.SelectOnStageByEffect ? (global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.SelectOnStageByEffect;
      }
    }

    /// <summary>Field number for the "cost_revise" field.</summary>
    public const int CostReviseFieldNumber = 1350;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise CostRevise {
      get { return messageCase_ == MessageOneofCase.CostRevise ? (global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise) message_ : null; }
      set {
        message_ = value;
        messageCase_ = value == null ? MessageOneofCase.None : MessageOneofCase.CostRevise;
      }
    }

    private object message_;
    /// <summary>Enum of possible cases for the "message" oneof.</summary>
    public enum MessageOneofCase {
      None = 0,
      TokenChange = 12,
      PhaseChange = 13,
      AddCards = 10,
      RemoveCards = 14,
      SelectOnStage = 6,
      DiceRoll = 9,
      DiceReroll = 11,
      Pass = 5,
      CharDie = 2,
      SkillResult = 1,
      CostDice = 7,
      AddDice = 3,
      MoveCard = 15,
      UseSkill = 4,
      NewCard = 1848,
      UpdateController = 429,
      ModifyAdd = 1851,
      ModifyRemove = 471,
      UseSkillEnd = 1411,
      PveGenCardOp = 1741,
      PveDoOp = 614,
      DuelDataChange = 1008,
      ClientPerform = 1035,
      GameOver = 714,
      OpTimer = 1862,
      WaitingListChange = 1678,
      CardUpdate = 1879,
      SelectOnStageByEffect = 2042,
      CostRevise = 1350,
    }
    private MessageOneofCase messageCase_ = MessageOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MessageOneofCase MessageCase {
      get { return messageCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMessage() {
      messageCase_ = MessageOneofCase.None;
      message_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GCGMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GCGMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TokenChange, other.TokenChange)) return false;
      if (!object.Equals(PhaseChange, other.PhaseChange)) return false;
      if (!object.Equals(AddCards, other.AddCards)) return false;
      if (!object.Equals(RemoveCards, other.RemoveCards)) return false;
      if (!object.Equals(SelectOnStage, other.SelectOnStage)) return false;
      if (!object.Equals(DiceRoll, other.DiceRoll)) return false;
      if (!object.Equals(DiceReroll, other.DiceReroll)) return false;
      if (!object.Equals(Pass, other.Pass)) return false;
      if (!object.Equals(CharDie, other.CharDie)) return false;
      if (!object.Equals(SkillResult, other.SkillResult)) return false;
      if (!object.Equals(CostDice, other.CostDice)) return false;
      if (!object.Equals(AddDice, other.AddDice)) return false;
      if (!object.Equals(MoveCard, other.MoveCard)) return false;
      if (!object.Equals(UseSkill, other.UseSkill)) return false;
      if (!object.Equals(NewCard, other.NewCard)) return false;
      if (!object.Equals(UpdateController, other.UpdateController)) return false;
      if (!object.Equals(ModifyAdd, other.ModifyAdd)) return false;
      if (!object.Equals(ModifyRemove, other.ModifyRemove)) return false;
      if (!object.Equals(UseSkillEnd, other.UseSkillEnd)) return false;
      if (!object.Equals(PveGenCardOp, other.PveGenCardOp)) return false;
      if (!object.Equals(PveDoOp, other.PveDoOp)) return false;
      if (!object.Equals(DuelDataChange, other.DuelDataChange)) return false;
      if (!object.Equals(ClientPerform, other.ClientPerform)) return false;
      if (!object.Equals(GameOver, other.GameOver)) return false;
      if (!object.Equals(OpTimer, other.OpTimer)) return false;
      if (!object.Equals(WaitingListChange, other.WaitingListChange)) return false;
      if (!object.Equals(CardUpdate, other.CardUpdate)) return false;
      if (!object.Equals(SelectOnStageByEffect, other.SelectOnStageByEffect)) return false;
      if (!object.Equals(CostRevise, other.CostRevise)) return false;
      if (MessageCase != other.MessageCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (messageCase_ == MessageOneofCase.TokenChange) hash ^= TokenChange.GetHashCode();
      if (messageCase_ == MessageOneofCase.PhaseChange) hash ^= PhaseChange.GetHashCode();
      if (messageCase_ == MessageOneofCase.AddCards) hash ^= AddCards.GetHashCode();
      if (messageCase_ == MessageOneofCase.RemoveCards) hash ^= RemoveCards.GetHashCode();
      if (messageCase_ == MessageOneofCase.SelectOnStage) hash ^= SelectOnStage.GetHashCode();
      if (messageCase_ == MessageOneofCase.DiceRoll) hash ^= DiceRoll.GetHashCode();
      if (messageCase_ == MessageOneofCase.DiceReroll) hash ^= DiceReroll.GetHashCode();
      if (messageCase_ == MessageOneofCase.Pass) hash ^= Pass.GetHashCode();
      if (messageCase_ == MessageOneofCase.CharDie) hash ^= CharDie.GetHashCode();
      if (messageCase_ == MessageOneofCase.SkillResult) hash ^= SkillResult.GetHashCode();
      if (messageCase_ == MessageOneofCase.CostDice) hash ^= CostDice.GetHashCode();
      if (messageCase_ == MessageOneofCase.AddDice) hash ^= AddDice.GetHashCode();
      if (messageCase_ == MessageOneofCase.MoveCard) hash ^= MoveCard.GetHashCode();
      if (messageCase_ == MessageOneofCase.UseSkill) hash ^= UseSkill.GetHashCode();
      if (messageCase_ == MessageOneofCase.NewCard) hash ^= NewCard.GetHashCode();
      if (messageCase_ == MessageOneofCase.UpdateController) hash ^= UpdateController.GetHashCode();
      if (messageCase_ == MessageOneofCase.ModifyAdd) hash ^= ModifyAdd.GetHashCode();
      if (messageCase_ == MessageOneofCase.ModifyRemove) hash ^= ModifyRemove.GetHashCode();
      if (messageCase_ == MessageOneofCase.UseSkillEnd) hash ^= UseSkillEnd.GetHashCode();
      if (messageCase_ == MessageOneofCase.PveGenCardOp) hash ^= PveGenCardOp.GetHashCode();
      if (messageCase_ == MessageOneofCase.PveDoOp) hash ^= PveDoOp.GetHashCode();
      if (messageCase_ == MessageOneofCase.DuelDataChange) hash ^= DuelDataChange.GetHashCode();
      if (messageCase_ == MessageOneofCase.ClientPerform) hash ^= ClientPerform.GetHashCode();
      if (messageCase_ == MessageOneofCase.GameOver) hash ^= GameOver.GetHashCode();
      if (messageCase_ == MessageOneofCase.OpTimer) hash ^= OpTimer.GetHashCode();
      if (messageCase_ == MessageOneofCase.WaitingListChange) hash ^= WaitingListChange.GetHashCode();
      if (messageCase_ == MessageOneofCase.CardUpdate) hash ^= CardUpdate.GetHashCode();
      if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) hash ^= SelectOnStageByEffect.GetHashCode();
      if (messageCase_ == MessageOneofCase.CostRevise) hash ^= CostRevise.GetHashCode();
      hash ^= (int) messageCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (messageCase_ == MessageOneofCase.SkillResult) {
        output.WriteRawTag(10);
        output.WriteMessage(SkillResult);
      }
      if (messageCase_ == MessageOneofCase.CharDie) {
        output.WriteRawTag(18);
        output.WriteMessage(CharDie);
      }
      if (messageCase_ == MessageOneofCase.AddDice) {
        output.WriteRawTag(26);
        output.WriteMessage(AddDice);
      }
      if (messageCase_ == MessageOneofCase.UseSkill) {
        output.WriteRawTag(34);
        output.WriteMessage(UseSkill);
      }
      if (messageCase_ == MessageOneofCase.Pass) {
        output.WriteRawTag(42);
        output.WriteMessage(Pass);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStage) {
        output.WriteRawTag(50);
        output.WriteMessage(SelectOnStage);
      }
      if (messageCase_ == MessageOneofCase.CostDice) {
        output.WriteRawTag(58);
        output.WriteMessage(CostDice);
      }
      if (messageCase_ == MessageOneofCase.DiceRoll) {
        output.WriteRawTag(74);
        output.WriteMessage(DiceRoll);
      }
      if (messageCase_ == MessageOneofCase.AddCards) {
        output.WriteRawTag(82);
        output.WriteMessage(AddCards);
      }
      if (messageCase_ == MessageOneofCase.DiceReroll) {
        output.WriteRawTag(90);
        output.WriteMessage(DiceReroll);
      }
      if (messageCase_ == MessageOneofCase.TokenChange) {
        output.WriteRawTag(98);
        output.WriteMessage(TokenChange);
      }
      if (messageCase_ == MessageOneofCase.PhaseChange) {
        output.WriteRawTag(106);
        output.WriteMessage(PhaseChange);
      }
      if (messageCase_ == MessageOneofCase.RemoveCards) {
        output.WriteRawTag(114);
        output.WriteMessage(RemoveCards);
      }
      if (messageCase_ == MessageOneofCase.MoveCard) {
        output.WriteRawTag(122);
        output.WriteMessage(MoveCard);
      }
      if (messageCase_ == MessageOneofCase.UpdateController) {
        output.WriteRawTag(234, 26);
        output.WriteMessage(UpdateController);
      }
      if (messageCase_ == MessageOneofCase.ModifyRemove) {
        output.WriteRawTag(186, 29);
        output.WriteMessage(ModifyRemove);
      }
      if (messageCase_ == MessageOneofCase.PveDoOp) {
        output.WriteRawTag(178, 38);
        output.WriteMessage(PveDoOp);
      }
      if (messageCase_ == MessageOneofCase.GameOver) {
        output.WriteRawTag(210, 44);
        output.WriteMessage(GameOver);
      }
      if (messageCase_ == MessageOneofCase.DuelDataChange) {
        output.WriteRawTag(130, 63);
        output.WriteMessage(DuelDataChange);
      }
      if (messageCase_ == MessageOneofCase.ClientPerform) {
        output.WriteRawTag(218, 64);
        output.WriteMessage(ClientPerform);
      }
      if (messageCase_ == MessageOneofCase.CostRevise) {
        output.WriteRawTag(178, 84);
        output.WriteMessage(CostRevise);
      }
      if (messageCase_ == MessageOneofCase.UseSkillEnd) {
        output.WriteRawTag(154, 88);
        output.WriteMessage(UseSkillEnd);
      }
      if (messageCase_ == MessageOneofCase.WaitingListChange) {
        output.WriteRawTag(242, 104);
        output.WriteMessage(WaitingListChange);
      }
      if (messageCase_ == MessageOneofCase.PveGenCardOp) {
        output.WriteRawTag(234, 108);
        output.WriteMessage(PveGenCardOp);
      }
      if (messageCase_ == MessageOneofCase.NewCard) {
        output.WriteRawTag(194, 115);
        output.WriteMessage(NewCard);
      }
      if (messageCase_ == MessageOneofCase.ModifyAdd) {
        output.WriteRawTag(218, 115);
        output.WriteMessage(ModifyAdd);
      }
      if (messageCase_ == MessageOneofCase.OpTimer) {
        output.WriteRawTag(178, 116);
        output.WriteMessage(OpTimer);
      }
      if (messageCase_ == MessageOneofCase.CardUpdate) {
        output.WriteRawTag(186, 117);
        output.WriteMessage(CardUpdate);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) {
        output.WriteRawTag(210, 127);
        output.WriteMessage(SelectOnStageByEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (messageCase_ == MessageOneofCase.SkillResult) {
        output.WriteRawTag(10);
        output.WriteMessage(SkillResult);
      }
      if (messageCase_ == MessageOneofCase.CharDie) {
        output.WriteRawTag(18);
        output.WriteMessage(CharDie);
      }
      if (messageCase_ == MessageOneofCase.AddDice) {
        output.WriteRawTag(26);
        output.WriteMessage(AddDice);
      }
      if (messageCase_ == MessageOneofCase.UseSkill) {
        output.WriteRawTag(34);
        output.WriteMessage(UseSkill);
      }
      if (messageCase_ == MessageOneofCase.Pass) {
        output.WriteRawTag(42);
        output.WriteMessage(Pass);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStage) {
        output.WriteRawTag(50);
        output.WriteMessage(SelectOnStage);
      }
      if (messageCase_ == MessageOneofCase.CostDice) {
        output.WriteRawTag(58);
        output.WriteMessage(CostDice);
      }
      if (messageCase_ == MessageOneofCase.DiceRoll) {
        output.WriteRawTag(74);
        output.WriteMessage(DiceRoll);
      }
      if (messageCase_ == MessageOneofCase.AddCards) {
        output.WriteRawTag(82);
        output.WriteMessage(AddCards);
      }
      if (messageCase_ == MessageOneofCase.DiceReroll) {
        output.WriteRawTag(90);
        output.WriteMessage(DiceReroll);
      }
      if (messageCase_ == MessageOneofCase.TokenChange) {
        output.WriteRawTag(98);
        output.WriteMessage(TokenChange);
      }
      if (messageCase_ == MessageOneofCase.PhaseChange) {
        output.WriteRawTag(106);
        output.WriteMessage(PhaseChange);
      }
      if (messageCase_ == MessageOneofCase.RemoveCards) {
        output.WriteRawTag(114);
        output.WriteMessage(RemoveCards);
      }
      if (messageCase_ == MessageOneofCase.MoveCard) {
        output.WriteRawTag(122);
        output.WriteMessage(MoveCard);
      }
      if (messageCase_ == MessageOneofCase.UpdateController) {
        output.WriteRawTag(234, 26);
        output.WriteMessage(UpdateController);
      }
      if (messageCase_ == MessageOneofCase.ModifyRemove) {
        output.WriteRawTag(186, 29);
        output.WriteMessage(ModifyRemove);
      }
      if (messageCase_ == MessageOneofCase.PveDoOp) {
        output.WriteRawTag(178, 38);
        output.WriteMessage(PveDoOp);
      }
      if (messageCase_ == MessageOneofCase.GameOver) {
        output.WriteRawTag(210, 44);
        output.WriteMessage(GameOver);
      }
      if (messageCase_ == MessageOneofCase.DuelDataChange) {
        output.WriteRawTag(130, 63);
        output.WriteMessage(DuelDataChange);
      }
      if (messageCase_ == MessageOneofCase.ClientPerform) {
        output.WriteRawTag(218, 64);
        output.WriteMessage(ClientPerform);
      }
      if (messageCase_ == MessageOneofCase.CostRevise) {
        output.WriteRawTag(178, 84);
        output.WriteMessage(CostRevise);
      }
      if (messageCase_ == MessageOneofCase.UseSkillEnd) {
        output.WriteRawTag(154, 88);
        output.WriteMessage(UseSkillEnd);
      }
      if (messageCase_ == MessageOneofCase.WaitingListChange) {
        output.WriteRawTag(242, 104);
        output.WriteMessage(WaitingListChange);
      }
      if (messageCase_ == MessageOneofCase.PveGenCardOp) {
        output.WriteRawTag(234, 108);
        output.WriteMessage(PveGenCardOp);
      }
      if (messageCase_ == MessageOneofCase.NewCard) {
        output.WriteRawTag(194, 115);
        output.WriteMessage(NewCard);
      }
      if (messageCase_ == MessageOneofCase.ModifyAdd) {
        output.WriteRawTag(218, 115);
        output.WriteMessage(ModifyAdd);
      }
      if (messageCase_ == MessageOneofCase.OpTimer) {
        output.WriteRawTag(178, 116);
        output.WriteMessage(OpTimer);
      }
      if (messageCase_ == MessageOneofCase.CardUpdate) {
        output.WriteRawTag(186, 117);
        output.WriteMessage(CardUpdate);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) {
        output.WriteRawTag(210, 127);
        output.WriteMessage(SelectOnStageByEffect);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (messageCase_ == MessageOneofCase.TokenChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenChange);
      }
      if (messageCase_ == MessageOneofCase.PhaseChange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhaseChange);
      }
      if (messageCase_ == MessageOneofCase.AddCards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddCards);
      }
      if (messageCase_ == MessageOneofCase.RemoveCards) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoveCards);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStage) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectOnStage);
      }
      if (messageCase_ == MessageOneofCase.DiceRoll) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiceRoll);
      }
      if (messageCase_ == MessageOneofCase.DiceReroll) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiceReroll);
      }
      if (messageCase_ == MessageOneofCase.Pass) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pass);
      }
      if (messageCase_ == MessageOneofCase.CharDie) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharDie);
      }
      if (messageCase_ == MessageOneofCase.SkillResult) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SkillResult);
      }
      if (messageCase_ == MessageOneofCase.CostDice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CostDice);
      }
      if (messageCase_ == MessageOneofCase.AddDice) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddDice);
      }
      if (messageCase_ == MessageOneofCase.MoveCard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoveCard);
      }
      if (messageCase_ == MessageOneofCase.UseSkill) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UseSkill);
      }
      if (messageCase_ == MessageOneofCase.NewCard) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NewCard);
      }
      if (messageCase_ == MessageOneofCase.UpdateController) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateController);
      }
      if (messageCase_ == MessageOneofCase.ModifyAdd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifyAdd);
      }
      if (messageCase_ == MessageOneofCase.ModifyRemove) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ModifyRemove);
      }
      if (messageCase_ == MessageOneofCase.UseSkillEnd) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(UseSkillEnd);
      }
      if (messageCase_ == MessageOneofCase.PveGenCardOp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PveGenCardOp);
      }
      if (messageCase_ == MessageOneofCase.PveDoOp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PveDoOp);
      }
      if (messageCase_ == MessageOneofCase.DuelDataChange) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DuelDataChange);
      }
      if (messageCase_ == MessageOneofCase.ClientPerform) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClientPerform);
      }
      if (messageCase_ == MessageOneofCase.GameOver) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameOver);
      }
      if (messageCase_ == MessageOneofCase.OpTimer) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpTimer);
      }
      if (messageCase_ == MessageOneofCase.WaitingListChange) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WaitingListChange);
      }
      if (messageCase_ == MessageOneofCase.CardUpdate) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CardUpdate);
      }
      if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SelectOnStageByEffect);
      }
      if (messageCase_ == MessageOneofCase.CostRevise) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CostRevise);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GCGMessage other) {
      if (other == null) {
        return;
      }
      switch (other.MessageCase) {
        case MessageOneofCase.TokenChange:
          if (TokenChange == null) {
            TokenChange = new global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange();
          }
          TokenChange.MergeFrom(other.TokenChange);
          break;
        case MessageOneofCase.PhaseChange:
          if (PhaseChange == null) {
            PhaseChange = new global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange();
          }
          PhaseChange.MergeFrom(other.PhaseChange);
          break;
        case MessageOneofCase.AddCards:
          if (AddCards == null) {
            AddCards = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards();
          }
          AddCards.MergeFrom(other.AddCards);
          break;
        case MessageOneofCase.RemoveCards:
          if (RemoveCards == null) {
            RemoveCards = new global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards();
          }
          RemoveCards.MergeFrom(other.RemoveCards);
          break;
        case MessageOneofCase.SelectOnStage:
          if (SelectOnStage == null) {
            SelectOnStage = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage();
          }
          SelectOnStage.MergeFrom(other.SelectOnStage);
          break;
        case MessageOneofCase.DiceRoll:
          if (DiceRoll == null) {
            DiceRoll = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll();
          }
          DiceRoll.MergeFrom(other.DiceRoll);
          break;
        case MessageOneofCase.DiceReroll:
          if (DiceReroll == null) {
            DiceReroll = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll();
          }
          DiceReroll.MergeFrom(other.DiceReroll);
          break;
        case MessageOneofCase.Pass:
          if (Pass == null) {
            Pass = new global::Weedwacker.Shared.Network.Proto.GCGMsgPass();
          }
          Pass.MergeFrom(other.Pass);
          break;
        case MessageOneofCase.CharDie:
          if (CharDie == null) {
            CharDie = new global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie();
          }
          CharDie.MergeFrom(other.CharDie);
          break;
        case MessageOneofCase.SkillResult:
          if (SkillResult == null) {
            SkillResult = new global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult();
          }
          SkillResult.MergeFrom(other.SkillResult);
          break;
        case MessageOneofCase.CostDice:
          if (CostDice == null) {
            CostDice = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice();
          }
          CostDice.MergeFrom(other.CostDice);
          break;
        case MessageOneofCase.AddDice:
          if (AddDice == null) {
            AddDice = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice();
          }
          AddDice.MergeFrom(other.AddDice);
          break;
        case MessageOneofCase.MoveCard:
          if (MoveCard == null) {
            MoveCard = new global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard();
          }
          MoveCard.MergeFrom(other.MoveCard);
          break;
        case MessageOneofCase.UseSkill:
          if (UseSkill == null) {
            UseSkill = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill();
          }
          UseSkill.MergeFrom(other.UseSkill);
          break;
        case MessageOneofCase.NewCard:
          if (NewCard == null) {
            NewCard = new global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard();
          }
          NewCard.MergeFrom(other.NewCard);
          break;
        case MessageOneofCase.UpdateController:
          if (UpdateController == null) {
            UpdateController = new global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController();
          }
          UpdateController.MergeFrom(other.UpdateController);
          break;
        case MessageOneofCase.ModifyAdd:
          if (ModifyAdd == null) {
            ModifyAdd = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd();
          }
          ModifyAdd.MergeFrom(other.ModifyAdd);
          break;
        case MessageOneofCase.ModifyRemove:
          if (ModifyRemove == null) {
            ModifyRemove = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove();
          }
          ModifyRemove.MergeFrom(other.ModifyRemove);
          break;
        case MessageOneofCase.UseSkillEnd:
          if (UseSkillEnd == null) {
            UseSkillEnd = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd();
          }
          UseSkillEnd.MergeFrom(other.UseSkillEnd);
          break;
        case MessageOneofCase.PveGenCardOp:
          if (PveGenCardOp == null) {
            PveGenCardOp = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp();
          }
          PveGenCardOp.MergeFrom(other.PveGenCardOp);
          break;
        case MessageOneofCase.PveDoOp:
          if (PveDoOp == null) {
            PveDoOp = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp();
          }
          PveDoOp.MergeFrom(other.PveDoOp);
          break;
        case MessageOneofCase.DuelDataChange:
          if (DuelDataChange == null) {
            DuelDataChange = new global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange();
          }
          DuelDataChange.MergeFrom(other.DuelDataChange);
          break;
        case MessageOneofCase.ClientPerform:
          if (ClientPerform == null) {
            ClientPerform = new global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform();
          }
          ClientPerform.MergeFrom(other.ClientPerform);
          break;
        case MessageOneofCase.GameOver:
          if (GameOver == null) {
            GameOver = new global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver();
          }
          GameOver.MergeFrom(other.GameOver);
          break;
        case MessageOneofCase.OpTimer:
          if (OpTimer == null) {
            OpTimer = new global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer();
          }
          OpTimer.MergeFrom(other.OpTimer);
          break;
        case MessageOneofCase.WaitingListChange:
          if (WaitingListChange == null) {
            WaitingListChange = new global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange();
          }
          WaitingListChange.MergeFrom(other.WaitingListChange);
          break;
        case MessageOneofCase.CardUpdate:
          if (CardUpdate == null) {
            CardUpdate = new global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate();
          }
          CardUpdate.MergeFrom(other.CardUpdate);
          break;
        case MessageOneofCase.SelectOnStageByEffect:
          if (SelectOnStageByEffect == null) {
            SelectOnStageByEffect = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect();
          }
          SelectOnStageByEffect.MergeFrom(other.SelectOnStageByEffect);
          break;
        case MessageOneofCase.CostRevise:
          if (CostRevise == null) {
            CostRevise = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise();
          }
          CostRevise.MergeFrom(other.CostRevise);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult();
            if (messageCase_ == MessageOneofCase.SkillResult) {
              subBuilder.MergeFrom(SkillResult);
            }
            input.ReadMessage(subBuilder);
            SkillResult = subBuilder;
            break;
          }
          case 18: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie();
            if (messageCase_ == MessageOneofCase.CharDie) {
              subBuilder.MergeFrom(CharDie);
            }
            input.ReadMessage(subBuilder);
            CharDie = subBuilder;
            break;
          }
          case 26: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice();
            if (messageCase_ == MessageOneofCase.AddDice) {
              subBuilder.MergeFrom(AddDice);
            }
            input.ReadMessage(subBuilder);
            AddDice = subBuilder;
            break;
          }
          case 34: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill();
            if (messageCase_ == MessageOneofCase.UseSkill) {
              subBuilder.MergeFrom(UseSkill);
            }
            input.ReadMessage(subBuilder);
            UseSkill = subBuilder;
            break;
          }
          case 42: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPass subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPass();
            if (messageCase_ == MessageOneofCase.Pass) {
              subBuilder.MergeFrom(Pass);
            }
            input.ReadMessage(subBuilder);
            Pass = subBuilder;
            break;
          }
          case 50: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage();
            if (messageCase_ == MessageOneofCase.SelectOnStage) {
              subBuilder.MergeFrom(SelectOnStage);
            }
            input.ReadMessage(subBuilder);
            SelectOnStage = subBuilder;
            break;
          }
          case 58: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice();
            if (messageCase_ == MessageOneofCase.CostDice) {
              subBuilder.MergeFrom(CostDice);
            }
            input.ReadMessage(subBuilder);
            CostDice = subBuilder;
            break;
          }
          case 74: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll();
            if (messageCase_ == MessageOneofCase.DiceRoll) {
              subBuilder.MergeFrom(DiceRoll);
            }
            input.ReadMessage(subBuilder);
            DiceRoll = subBuilder;
            break;
          }
          case 82: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards();
            if (messageCase_ == MessageOneofCase.AddCards) {
              subBuilder.MergeFrom(AddCards);
            }
            input.ReadMessage(subBuilder);
            AddCards = subBuilder;
            break;
          }
          case 90: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll();
            if (messageCase_ == MessageOneofCase.DiceReroll) {
              subBuilder.MergeFrom(DiceReroll);
            }
            input.ReadMessage(subBuilder);
            DiceReroll = subBuilder;
            break;
          }
          case 98: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange();
            if (messageCase_ == MessageOneofCase.TokenChange) {
              subBuilder.MergeFrom(TokenChange);
            }
            input.ReadMessage(subBuilder);
            TokenChange = subBuilder;
            break;
          }
          case 106: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange();
            if (messageCase_ == MessageOneofCase.PhaseChange) {
              subBuilder.MergeFrom(PhaseChange);
            }
            input.ReadMessage(subBuilder);
            PhaseChange = subBuilder;
            break;
          }
          case 114: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards();
            if (messageCase_ == MessageOneofCase.RemoveCards) {
              subBuilder.MergeFrom(RemoveCards);
            }
            input.ReadMessage(subBuilder);
            RemoveCards = subBuilder;
            break;
          }
          case 122: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard();
            if (messageCase_ == MessageOneofCase.MoveCard) {
              subBuilder.MergeFrom(MoveCard);
            }
            input.ReadMessage(subBuilder);
            MoveCard = subBuilder;
            break;
          }
          case 3434: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController();
            if (messageCase_ == MessageOneofCase.UpdateController) {
              subBuilder.MergeFrom(UpdateController);
            }
            input.ReadMessage(subBuilder);
            UpdateController = subBuilder;
            break;
          }
          case 3770: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove();
            if (messageCase_ == MessageOneofCase.ModifyRemove) {
              subBuilder.MergeFrom(ModifyRemove);
            }
            input.ReadMessage(subBuilder);
            ModifyRemove = subBuilder;
            break;
          }
          case 4914: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp();
            if (messageCase_ == MessageOneofCase.PveDoOp) {
              subBuilder.MergeFrom(PveDoOp);
            }
            input.ReadMessage(subBuilder);
            PveDoOp = subBuilder;
            break;
          }
          case 5714: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver();
            if (messageCase_ == MessageOneofCase.GameOver) {
              subBuilder.MergeFrom(GameOver);
            }
            input.ReadMessage(subBuilder);
            GameOver = subBuilder;
            break;
          }
          case 8066: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange();
            if (messageCase_ == MessageOneofCase.DuelDataChange) {
              subBuilder.MergeFrom(DuelDataChange);
            }
            input.ReadMessage(subBuilder);
            DuelDataChange = subBuilder;
            break;
          }
          case 8282: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform();
            if (messageCase_ == MessageOneofCase.ClientPerform) {
              subBuilder.MergeFrom(ClientPerform);
            }
            input.ReadMessage(subBuilder);
            ClientPerform = subBuilder;
            break;
          }
          case 10802: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise();
            if (messageCase_ == MessageOneofCase.CostRevise) {
              subBuilder.MergeFrom(CostRevise);
            }
            input.ReadMessage(subBuilder);
            CostRevise = subBuilder;
            break;
          }
          case 11290: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd();
            if (messageCase_ == MessageOneofCase.UseSkillEnd) {
              subBuilder.MergeFrom(UseSkillEnd);
            }
            input.ReadMessage(subBuilder);
            UseSkillEnd = subBuilder;
            break;
          }
          case 13426: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange();
            if (messageCase_ == MessageOneofCase.WaitingListChange) {
              subBuilder.MergeFrom(WaitingListChange);
            }
            input.ReadMessage(subBuilder);
            WaitingListChange = subBuilder;
            break;
          }
          case 13930: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp();
            if (messageCase_ == MessageOneofCase.PveGenCardOp) {
              subBuilder.MergeFrom(PveGenCardOp);
            }
            input.ReadMessage(subBuilder);
            PveGenCardOp = subBuilder;
            break;
          }
          case 14786: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard();
            if (messageCase_ == MessageOneofCase.NewCard) {
              subBuilder.MergeFrom(NewCard);
            }
            input.ReadMessage(subBuilder);
            NewCard = subBuilder;
            break;
          }
          case 14810: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd();
            if (messageCase_ == MessageOneofCase.ModifyAdd) {
              subBuilder.MergeFrom(ModifyAdd);
            }
            input.ReadMessage(subBuilder);
            ModifyAdd = subBuilder;
            break;
          }
          case 14898: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer();
            if (messageCase_ == MessageOneofCase.OpTimer) {
              subBuilder.MergeFrom(OpTimer);
            }
            input.ReadMessage(subBuilder);
            OpTimer = subBuilder;
            break;
          }
          case 15034: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate();
            if (messageCase_ == MessageOneofCase.CardUpdate) {
              subBuilder.MergeFrom(CardUpdate);
            }
            input.ReadMessage(subBuilder);
            CardUpdate = subBuilder;
            break;
          }
          case 16338: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect();
            if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) {
              subBuilder.MergeFrom(SelectOnStageByEffect);
            }
            input.ReadMessage(subBuilder);
            SelectOnStageByEffect = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSkillResult();
            if (messageCase_ == MessageOneofCase.SkillResult) {
              subBuilder.MergeFrom(SkillResult);
            }
            input.ReadMessage(subBuilder);
            SkillResult = subBuilder;
            break;
          }
          case 18: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCharDie();
            if (messageCase_ == MessageOneofCase.CharDie) {
              subBuilder.MergeFrom(CharDie);
            }
            input.ReadMessage(subBuilder);
            CharDie = subBuilder;
            break;
          }
          case 26: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddDice();
            if (messageCase_ == MessageOneofCase.AddDice) {
              subBuilder.MergeFrom(AddDice);
            }
            input.ReadMessage(subBuilder);
            AddDice = subBuilder;
            break;
          }
          case 34: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkill();
            if (messageCase_ == MessageOneofCase.UseSkill) {
              subBuilder.MergeFrom(UseSkill);
            }
            input.ReadMessage(subBuilder);
            UseSkill = subBuilder;
            break;
          }
          case 42: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPass subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPass();
            if (messageCase_ == MessageOneofCase.Pass) {
              subBuilder.MergeFrom(Pass);
            }
            input.ReadMessage(subBuilder);
            Pass = subBuilder;
            break;
          }
          case 50: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStage();
            if (messageCase_ == MessageOneofCase.SelectOnStage) {
              subBuilder.MergeFrom(SelectOnStage);
            }
            input.ReadMessage(subBuilder);
            SelectOnStage = subBuilder;
            break;
          }
          case 58: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostDice();
            if (messageCase_ == MessageOneofCase.CostDice) {
              subBuilder.MergeFrom(CostDice);
            }
            input.ReadMessage(subBuilder);
            CostDice = subBuilder;
            break;
          }
          case 74: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceRoll();
            if (messageCase_ == MessageOneofCase.DiceRoll) {
              subBuilder.MergeFrom(DiceRoll);
            }
            input.ReadMessage(subBuilder);
            DiceRoll = subBuilder;
            break;
          }
          case 82: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgAddCards();
            if (messageCase_ == MessageOneofCase.AddCards) {
              subBuilder.MergeFrom(AddCards);
            }
            input.ReadMessage(subBuilder);
            AddCards = subBuilder;
            break;
          }
          case 90: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDiceReroll();
            if (messageCase_ == MessageOneofCase.DiceReroll) {
              subBuilder.MergeFrom(DiceReroll);
            }
            input.ReadMessage(subBuilder);
            DiceReroll = subBuilder;
            break;
          }
          case 98: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgTokenChange();
            if (messageCase_ == MessageOneofCase.TokenChange) {
              subBuilder.MergeFrom(TokenChange);
            }
            input.ReadMessage(subBuilder);
            TokenChange = subBuilder;
            break;
          }
          case 106: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPhaseChange();
            if (messageCase_ == MessageOneofCase.PhaseChange) {
              subBuilder.MergeFrom(PhaseChange);
            }
            input.ReadMessage(subBuilder);
            PhaseChange = subBuilder;
            break;
          }
          case 114: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgRemoveCards();
            if (messageCase_ == MessageOneofCase.RemoveCards) {
              subBuilder.MergeFrom(RemoveCards);
            }
            input.ReadMessage(subBuilder);
            RemoveCards = subBuilder;
            break;
          }
          case 122: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgMoveCard();
            if (messageCase_ == MessageOneofCase.MoveCard) {
              subBuilder.MergeFrom(MoveCard);
            }
            input.ReadMessage(subBuilder);
            MoveCard = subBuilder;
            break;
          }
          case 3434: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUpdateController();
            if (messageCase_ == MessageOneofCase.UpdateController) {
              subBuilder.MergeFrom(UpdateController);
            }
            input.ReadMessage(subBuilder);
            UpdateController = subBuilder;
            break;
          }
          case 3770: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyRemove();
            if (messageCase_ == MessageOneofCase.ModifyRemove) {
              subBuilder.MergeFrom(ModifyRemove);
            }
            input.ReadMessage(subBuilder);
            ModifyRemove = subBuilder;
            break;
          }
          case 4914: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEDoOp();
            if (messageCase_ == MessageOneofCase.PveDoOp) {
              subBuilder.MergeFrom(PveDoOp);
            }
            input.ReadMessage(subBuilder);
            PveDoOp = subBuilder;
            break;
          }
          case 5714: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgGameOver();
            if (messageCase_ == MessageOneofCase.GameOver) {
              subBuilder.MergeFrom(GameOver);
            }
            input.ReadMessage(subBuilder);
            GameOver = subBuilder;
            break;
          }
          case 8066: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgDuelDataChange();
            if (messageCase_ == MessageOneofCase.DuelDataChange) {
              subBuilder.MergeFrom(DuelDataChange);
            }
            input.ReadMessage(subBuilder);
            DuelDataChange = subBuilder;
            break;
          }
          case 8282: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgClientPerform();
            if (messageCase_ == MessageOneofCase.ClientPerform) {
              subBuilder.MergeFrom(ClientPerform);
            }
            input.ReadMessage(subBuilder);
            ClientPerform = subBuilder;
            break;
          }
          case 10802: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCostRevise();
            if (messageCase_ == MessageOneofCase.CostRevise) {
              subBuilder.MergeFrom(CostRevise);
            }
            input.ReadMessage(subBuilder);
            CostRevise = subBuilder;
            break;
          }
          case 11290: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgUseSkillEnd();
            if (messageCase_ == MessageOneofCase.UseSkillEnd) {
              subBuilder.MergeFrom(UseSkillEnd);
            }
            input.ReadMessage(subBuilder);
            UseSkillEnd = subBuilder;
            break;
          }
          case 13426: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgWaitingListChange();
            if (messageCase_ == MessageOneofCase.WaitingListChange) {
              subBuilder.MergeFrom(WaitingListChange);
            }
            input.ReadMessage(subBuilder);
            WaitingListChange = subBuilder;
            break;
          }
          case 13930: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgPVEGenCardOp();
            if (messageCase_ == MessageOneofCase.PveGenCardOp) {
              subBuilder.MergeFrom(PveGenCardOp);
            }
            input.ReadMessage(subBuilder);
            PveGenCardOp = subBuilder;
            break;
          }
          case 14786: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgNewCard();
            if (messageCase_ == MessageOneofCase.NewCard) {
              subBuilder.MergeFrom(NewCard);
            }
            input.ReadMessage(subBuilder);
            NewCard = subBuilder;
            break;
          }
          case 14810: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgModifyAdd();
            if (messageCase_ == MessageOneofCase.ModifyAdd) {
              subBuilder.MergeFrom(ModifyAdd);
            }
            input.ReadMessage(subBuilder);
            ModifyAdd = subBuilder;
            break;
          }
          case 14898: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgOpTimer();
            if (messageCase_ == MessageOneofCase.OpTimer) {
              subBuilder.MergeFrom(OpTimer);
            }
            input.ReadMessage(subBuilder);
            OpTimer = subBuilder;
            break;
          }
          case 15034: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgCardUpdate();
            if (messageCase_ == MessageOneofCase.CardUpdate) {
              subBuilder.MergeFrom(CardUpdate);
            }
            input.ReadMessage(subBuilder);
            CardUpdate = subBuilder;
            break;
          }
          case 16338: {
            global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect subBuilder = new global::Weedwacker.Shared.Network.Proto.GCGMsgSelectOnStageByEffect();
            if (messageCase_ == MessageOneofCase.SelectOnStageByEffect) {
              subBuilder.MergeFrom(SelectOnStageByEffect);
            }
            input.ReadMessage(subBuilder);
            SelectOnStageByEffect = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
